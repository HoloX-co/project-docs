name: Check Links

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check links in markdown files
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress --exclude-path content/_templates './**/*.md'
        fail: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: List files to be checked
      run: |
        echo "=== Files that will be checked ==="
        echo "CSS files in assets:"
        find ./assets -name "*.css" -type f 2>/dev/null || echo "No CSS files found in assets"
        echo "CSS files in static:"
        find ./static -name "*.css" -type f 2>/dev/null || echo "No CSS files found in static"
        echo "All CSS files:"
        find . -name "*.css" -type f 2>/dev/null || echo "No CSS files found"
        echo "================================"
        
    - name: Check links in CSS files (assets)
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress --include-verbatim 'assets/**/*.css'
        fail: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check links in CSS files (static) 
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress --include-verbatim 'static/**/*.css'
        fail: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check asset file references
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress --include-verbatim 'assets/**/*.{js,scss,sass}'
        fail: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Check static file references
      uses: lycheeverse/lychee-action@v1
      with:
        args: --verbose --no-progress --include-verbatim 'static/**/*.{js,html}'
        fail: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify image assets exist
      run: |
        echo "=== Checking for referenced images in CSS files ==="
        
        # First, list all CSS files we're checking
        echo "CSS files found:"
        find . -name "*.css" -type f | head -10
        echo ""
        
        # Extract image references from CSS files
        css_files_with_urls=$(find . -name "*.css" -type f -exec grep -l "url(" {} \;)
        
        if [ -z "$css_files_with_urls" ]; then
          echo "No CSS files with url() references found"
          exit 0
        fi
        
        echo "$css_files_with_urls" | while read cssfile; do
          echo "Checking CSS file: $cssfile"
          
          # Extract URLs and clean them up
          grep -o "url([^)]*)" "$cssfile" | while read urlref; do
            # Remove url( and )
            imgpath=$(echo "$urlref" | sed 's/url(\(.*\))/\1/' | sed 's/['"'"'"]//g')
            
            echo "  Found reference: $imgpath"
            
            # Skip external URLs
            if [[ $imgpath == http* ]]; then
              echo "    ↳ External URL, skipping local check"
              continue
            fi
            
            # Handle different path types
            if [[ $imgpath == ../* ]]; then
              # Relative path going up
              cssdir=$(dirname "$cssfile")
              fullpath="$cssdir/$imgpath"
              # Normalize the path
              fullpath=$(realpath -m "$fullpath" 2>/dev/null || echo "$fullpath")
            elif [[ $imgpath == /* ]]; then
              # Absolute path from project root
              fullpath=".$imgpath"
            elif [[ $imgpath == ./* ]]; then
              # Relative path from CSS file
              cssdir=$(dirname "$cssfile")
              fullpath="$cssdir/$imgpath"
            else
              # Simple relative path
              cssdir=$(dirname "$cssfile")
              fullpath="$cssdir/$imgpath"
            fi
            
            echo "    ↳ Resolved to: $fullpath"
            
            # Check if file exists
            if [ -f "$fullpath" ]; then
              echo "    ✓ Found: $fullpath"
            else
              echo "    ✗ Missing: $fullpath"
              
              # Try alternative locations
              staticpath="./static$imgpath"
              publicpath="./public$imgpath"
              
              if [ -f "$staticpath" ]; then
                echo "      ✓ Found alternative in static: $staticpath"
              elif [ -f "$publicpath" ]; then
                echo "      ✓ Found alternative in public: $publicpath"
              else
                echo "      ✗ Not found in any location"
                echo "ERROR: Missing asset reference: $imgpath in $cssfile"
                exit 1
              fi
            fi
          done
        done
        
        echo "=== Asset verification complete ==="
        
    - name: Create Issue From File
      if: failure()
      uses: peter-evans/create-issue-from-file@v5
      with:
        title: Link and Asset Checker Report
        content-filepath: ./lychee/out.md
        labels: |
          report
          automated issue
          asset-check